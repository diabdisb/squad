#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_TicketDetailsCategory_Logistics

#include "Basic.hpp"

#include "Squad_structs.hpp"


namespace SDK::Params
{

// Function W_TicketDetailsCategory_Logistics.W_TicketDetailsCategory_Logistics_C.AddRow
// 0x00C0 (0x00C0 - 0x0000)
struct W_TicketDetailsCategory_Logistics_C_AddRow final
{
public:
	struct FSQTicketsSummaryRecord                Fob;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	int32                                         Ammo;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Construction;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AddIndex;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_TicketDetailRecord_C*                CallFunc_Create_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_TicketDetailRecord_C*                CallFunc_Create_ReturnValue_1;                     // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_TicketDetailRecord_C*                CallFunc_Create_ReturnValue_2;                     // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGridSlot*                              K2Node_DynamicCast_AsGrid_Slot;                    // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue_1;                   // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGridSlot*                              K2Node_DynamicCast_AsGrid_Slot_1;                  // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0060(0x0018)(ConstParm)
	class FText                                   Temp_text_Variable_1;                              // 0x0078(0x0018)(ConstParm)
	class FText                                   Temp_text_Variable_2;                              // 0x0090(0x0018)(ConstParm)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue_2;                   // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGridSlot*                              K2Node_DynamicCast_AsGrid_Slot_2;                  // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_TicketDetailsCategory_Logistics_C_AddRow) == 0x000008, "Wrong alignment on W_TicketDetailsCategory_Logistics_C_AddRow");
static_assert(sizeof(W_TicketDetailsCategory_Logistics_C_AddRow) == 0x0000C0, "Wrong size on W_TicketDetailsCategory_Logistics_C_AddRow");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_AddRow, Fob) == 0x000000, "Member 'W_TicketDetailsCategory_Logistics_C_AddRow::Fob' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_AddRow, Ammo) == 0x00000C, "Member 'W_TicketDetailsCategory_Logistics_C_AddRow::Ammo' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_AddRow, Construction) == 0x000010, "Member 'W_TicketDetailsCategory_Logistics_C_AddRow::Construction' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_AddRow, AddIndex) == 0x000014, "Member 'W_TicketDetailsCategory_Logistics_C_AddRow::AddIndex' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_AddRow, CallFunc_Create_ReturnValue) == 0x000018, "Member 'W_TicketDetailsCategory_Logistics_C_AddRow::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_AddRow, CallFunc_Create_ReturnValue_1) == 0x000020, "Member 'W_TicketDetailsCategory_Logistics_C_AddRow::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_AddRow, CallFunc_Create_ReturnValue_2) == 0x000028, "Member 'W_TicketDetailsCategory_Logistics_C_AddRow::CallFunc_Create_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_AddRow, CallFunc_AddChild_ReturnValue) == 0x000030, "Member 'W_TicketDetailsCategory_Logistics_C_AddRow::CallFunc_AddChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_AddRow, K2Node_DynamicCast_AsGrid_Slot) == 0x000038, "Member 'W_TicketDetailsCategory_Logistics_C_AddRow::K2Node_DynamicCast_AsGrid_Slot' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_AddRow, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'W_TicketDetailsCategory_Logistics_C_AddRow::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_AddRow, CallFunc_AddChild_ReturnValue_1) == 0x000048, "Member 'W_TicketDetailsCategory_Logistics_C_AddRow::CallFunc_AddChild_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_AddRow, K2Node_DynamicCast_AsGrid_Slot_1) == 0x000050, "Member 'W_TicketDetailsCategory_Logistics_C_AddRow::K2Node_DynamicCast_AsGrid_Slot_1' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_AddRow, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'W_TicketDetailsCategory_Logistics_C_AddRow::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_AddRow, Temp_text_Variable) == 0x000060, "Member 'W_TicketDetailsCategory_Logistics_C_AddRow::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_AddRow, Temp_text_Variable_1) == 0x000078, "Member 'W_TicketDetailsCategory_Logistics_C_AddRow::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_AddRow, Temp_text_Variable_2) == 0x000090, "Member 'W_TicketDetailsCategory_Logistics_C_AddRow::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_AddRow, CallFunc_AddChild_ReturnValue_2) == 0x0000A8, "Member 'W_TicketDetailsCategory_Logistics_C_AddRow::CallFunc_AddChild_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_AddRow, K2Node_DynamicCast_AsGrid_Slot_2) == 0x0000B0, "Member 'W_TicketDetailsCategory_Logistics_C_AddRow::K2Node_DynamicCast_AsGrid_Slot_2' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_AddRow, K2Node_DynamicCast_bSuccess_2) == 0x0000B8, "Member 'W_TicketDetailsCategory_Logistics_C_AddRow::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function W_TicketDetailsCategory_Logistics.W_TicketDetailsCategory_Logistics_C.GetMaxValues
// 0x0018 (0x0018 - 0x0000)
struct W_TicketDetailsCategory_Logistics_C_GetMaxValues final
{
public:
	int32                                         Units;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UnitTickets;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Score;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetValues_Units;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetValues_UnitTickets;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetValues_Score;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_TicketDetailsCategory_Logistics_C_GetMaxValues) == 0x000004, "Wrong alignment on W_TicketDetailsCategory_Logistics_C_GetMaxValues");
static_assert(sizeof(W_TicketDetailsCategory_Logistics_C_GetMaxValues) == 0x000018, "Wrong size on W_TicketDetailsCategory_Logistics_C_GetMaxValues");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_GetMaxValues, Units) == 0x000000, "Member 'W_TicketDetailsCategory_Logistics_C_GetMaxValues::Units' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_GetMaxValues, UnitTickets) == 0x000004, "Member 'W_TicketDetailsCategory_Logistics_C_GetMaxValues::UnitTickets' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_GetMaxValues, Score) == 0x000008, "Member 'W_TicketDetailsCategory_Logistics_C_GetMaxValues::Score' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_GetMaxValues, CallFunc_GetValues_Units) == 0x00000C, "Member 'W_TicketDetailsCategory_Logistics_C_GetMaxValues::CallFunc_GetValues_Units' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_GetMaxValues, CallFunc_GetValues_UnitTickets) == 0x000010, "Member 'W_TicketDetailsCategory_Logistics_C_GetMaxValues::CallFunc_GetValues_UnitTickets' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_GetMaxValues, CallFunc_GetValues_Score) == 0x000014, "Member 'W_TicketDetailsCategory_Logistics_C_GetMaxValues::CallFunc_GetValues_Score' has a wrong offset!");

// Function W_TicketDetailsCategory_Logistics.W_TicketDetailsCategory_Logistics_C.UpdateProgressBar
// 0x0024 (0x0024 - 0x0000)
struct W_TicketDetailsCategory_Logistics_C_UpdateProgressBar final
{
public:
	int32                                         MaxScore;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ResourcesSum;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetValues_Units;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetValues_UnitTickets;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetValues_Score;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetValues_Units_1;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetValues_UnitTickets_1;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetValues_Score_1;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_TicketDetailsCategory_Logistics_C_UpdateProgressBar) == 0x000004, "Wrong alignment on W_TicketDetailsCategory_Logistics_C_UpdateProgressBar");
static_assert(sizeof(W_TicketDetailsCategory_Logistics_C_UpdateProgressBar) == 0x000024, "Wrong size on W_TicketDetailsCategory_Logistics_C_UpdateProgressBar");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_UpdateProgressBar, MaxScore) == 0x000000, "Member 'W_TicketDetailsCategory_Logistics_C_UpdateProgressBar::MaxScore' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_UpdateProgressBar, ResourcesSum) == 0x000004, "Member 'W_TicketDetailsCategory_Logistics_C_UpdateProgressBar::ResourcesSum' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_UpdateProgressBar, CallFunc_GetValues_Units) == 0x000008, "Member 'W_TicketDetailsCategory_Logistics_C_UpdateProgressBar::CallFunc_GetValues_Units' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_UpdateProgressBar, CallFunc_GetValues_UnitTickets) == 0x00000C, "Member 'W_TicketDetailsCategory_Logistics_C_UpdateProgressBar::CallFunc_GetValues_UnitTickets' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_UpdateProgressBar, CallFunc_GetValues_Score) == 0x000010, "Member 'W_TicketDetailsCategory_Logistics_C_UpdateProgressBar::CallFunc_GetValues_Score' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_UpdateProgressBar, CallFunc_GetValues_Units_1) == 0x000014, "Member 'W_TicketDetailsCategory_Logistics_C_UpdateProgressBar::CallFunc_GetValues_Units_1' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_UpdateProgressBar, CallFunc_GetValues_UnitTickets_1) == 0x000018, "Member 'W_TicketDetailsCategory_Logistics_C_UpdateProgressBar::CallFunc_GetValues_UnitTickets_1' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_UpdateProgressBar, CallFunc_GetValues_Score_1) == 0x00001C, "Member 'W_TicketDetailsCategory_Logistics_C_UpdateProgressBar::CallFunc_GetValues_Score_1' has a wrong offset!");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_UpdateProgressBar, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'W_TicketDetailsCategory_Logistics_C_UpdateProgressBar::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function W_TicketDetailsCategory_Logistics.W_TicketDetailsCategory_Logistics_C.FillEmptyRecords
// 0x0008 (0x0008 - 0x0000)
struct W_TicketDetailsCategory_Logistics_C_FillEmptyRecords final
{
public:
	class UUMG_Tooltip_C*                         Tooltip;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_TicketDetailsCategory_Logistics_C_FillEmptyRecords) == 0x000008, "Wrong alignment on W_TicketDetailsCategory_Logistics_C_FillEmptyRecords");
static_assert(sizeof(W_TicketDetailsCategory_Logistics_C_FillEmptyRecords) == 0x000008, "Wrong size on W_TicketDetailsCategory_Logistics_C_FillEmptyRecords");
static_assert(offsetof(W_TicketDetailsCategory_Logistics_C_FillEmptyRecords, Tooltip) == 0x000000, "Member 'W_TicketDetailsCategory_Logistics_C_FillEmptyRecords::Tooltip' has a wrong offset!");

}

