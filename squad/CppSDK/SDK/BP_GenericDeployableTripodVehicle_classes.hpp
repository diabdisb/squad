#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GenericDeployableTripodVehicle

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Squad_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GenericDeployableTripodVehicle.BP_GenericDeployableTripodVehicle_C
// 0x0080 (0x0A30 - 0x09B0)
class ABP_GenericDeployableTripodVehicle_C final : public ASQDeployableTripodVehicle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x09B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USQTurretMovementComponent*             SQTurretMovement;                                  // 0x09B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQRotationMovementAudioComponent*      SQRotationMovementAudio;                           // 0x09C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InteractBox;                                       // 0x09C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Alpha_CFEF4702469632CD3F85698DD89C96B1; // 0x09D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_CFEF4702469632CD3F85698DD89C96B1; // 0x09D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D5[0x3];                                      // 0x09D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x09D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsInThirdPerson_0;                                // 0x09E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9E1[0x3];                                      // 0x09E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              FreelookLimitPitch;                                // 0x09E4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              FreelookLimitYaw;                                  // 0x09EC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAllowFocus;                                       // 0x09F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseVehicleZoom;                                   // 0x09F5(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bTripodIsADS;                                      // 0x09F6(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F7[0x1];                                      // 0x09F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ZoomLevels;                                        // 0x09F8(0x0010)(Edit, BlueprintVisible, Net)
	float                                         ElevationSpeedMultiplier;                          // 0x0A08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxElevationSpeed;                                 // 0x0A0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationSpeedMultiplier;                           // 0x0A10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxRotationSpeed;                                  // 0x0A14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KeyboardYawRotationMultiplier;                     // 0x0A18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KeyboardPitchRotationMultiplier;                   // 0x0A1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KeyboardYawRotationADSMultiplier;                  // 0x0A20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseADSMultiplier;                                 // 0x0A24(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A25[0x3];                                      // 0x0A25(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KeyboardPtichRotationADSMultiplier;                // 0x0A28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsFocused;                                        // 0x0A2C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_GenericDeployableTripodVehicle(int32 EntryPoint);
	void ZoomReverse();
	void ZoomForward();
	void PlayCycleMagnificationSounds();
	void InpAxisEvt_VehicleMoveForward_K2Node_InputAxisEvent_2(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_39(float AxisValue);
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_42(float AxisValue);
	void InpAxisEvt_VehicleMoveRight_K2Node_InputAxisEvent_0(float AxisValue);
	void ReceiveBeginPlay();
	void InpActEvt_Focus_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Focus_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_VehicleZoom_K2Node_InputActionEvent_2(const struct FKey& Key);
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void UserConstructionScript();
	TArray<float> GetZoomLevels();
	bool ShouldUseVehicleZoom();

	TArray<float> GetMagnificationLevels() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GenericDeployableTripodVehicle_C">();
	}
	static class ABP_GenericDeployableTripodVehicle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GenericDeployableTripodVehicle_C>();
	}
};
static_assert(alignof(ABP_GenericDeployableTripodVehicle_C) == 0x000010, "Wrong alignment on ABP_GenericDeployableTripodVehicle_C");
static_assert(sizeof(ABP_GenericDeployableTripodVehicle_C) == 0x000A30, "Wrong size on ABP_GenericDeployableTripodVehicle_C");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, UberGraphFrame) == 0x0009B0, "Member 'ABP_GenericDeployableTripodVehicle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, SQTurretMovement) == 0x0009B8, "Member 'ABP_GenericDeployableTripodVehicle_C::SQTurretMovement' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, SQRotationMovementAudio) == 0x0009C0, "Member 'ABP_GenericDeployableTripodVehicle_C::SQRotationMovementAudio' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, InteractBox) == 0x0009C8, "Member 'ABP_GenericDeployableTripodVehicle_C::InteractBox' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, Timeline_0_Alpha_CFEF4702469632CD3F85698DD89C96B1) == 0x0009D0, "Member 'ABP_GenericDeployableTripodVehicle_C::Timeline_0_Alpha_CFEF4702469632CD3F85698DD89C96B1' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, Timeline_0__Direction_CFEF4702469632CD3F85698DD89C96B1) == 0x0009D4, "Member 'ABP_GenericDeployableTripodVehicle_C::Timeline_0__Direction_CFEF4702469632CD3F85698DD89C96B1' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, Timeline_0) == 0x0009D8, "Member 'ABP_GenericDeployableTripodVehicle_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, bIsInThirdPerson_0) == 0x0009E0, "Member 'ABP_GenericDeployableTripodVehicle_C::bIsInThirdPerson_0' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, FreelookLimitPitch) == 0x0009E4, "Member 'ABP_GenericDeployableTripodVehicle_C::FreelookLimitPitch' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, FreelookLimitYaw) == 0x0009EC, "Member 'ABP_GenericDeployableTripodVehicle_C::FreelookLimitYaw' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, bAllowFocus) == 0x0009F4, "Member 'ABP_GenericDeployableTripodVehicle_C::bAllowFocus' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, bUseVehicleZoom) == 0x0009F5, "Member 'ABP_GenericDeployableTripodVehicle_C::bUseVehicleZoom' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, bTripodIsADS) == 0x0009F6, "Member 'ABP_GenericDeployableTripodVehicle_C::bTripodIsADS' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, ZoomLevels) == 0x0009F8, "Member 'ABP_GenericDeployableTripodVehicle_C::ZoomLevels' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, ElevationSpeedMultiplier) == 0x000A08, "Member 'ABP_GenericDeployableTripodVehicle_C::ElevationSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, MaxElevationSpeed) == 0x000A0C, "Member 'ABP_GenericDeployableTripodVehicle_C::MaxElevationSpeed' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, RotationSpeedMultiplier) == 0x000A10, "Member 'ABP_GenericDeployableTripodVehicle_C::RotationSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, MaxRotationSpeed) == 0x000A14, "Member 'ABP_GenericDeployableTripodVehicle_C::MaxRotationSpeed' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, KeyboardYawRotationMultiplier) == 0x000A18, "Member 'ABP_GenericDeployableTripodVehicle_C::KeyboardYawRotationMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, KeyboardPitchRotationMultiplier) == 0x000A1C, "Member 'ABP_GenericDeployableTripodVehicle_C::KeyboardPitchRotationMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, KeyboardYawRotationADSMultiplier) == 0x000A20, "Member 'ABP_GenericDeployableTripodVehicle_C::KeyboardYawRotationADSMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, bUseADSMultiplier) == 0x000A24, "Member 'ABP_GenericDeployableTripodVehicle_C::bUseADSMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, KeyboardPtichRotationADSMultiplier) == 0x000A28, "Member 'ABP_GenericDeployableTripodVehicle_C::KeyboardPtichRotationADSMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_GenericDeployableTripodVehicle_C, bIsFocused) == 0x000A2C, "Member 'ABP_GenericDeployableTripodVehicle_C::bIsFocused' has a wrong offset!");

}

