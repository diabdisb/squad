#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_TicketDetailRecord

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function W_TicketDetailRecord.W_TicketDetailRecord_C.ExecuteUbergraph_W_TicketDetailRecord
// 0x0008 (0x0008 - 0x0000)
struct W_TicketDetailRecord_C_ExecuteUbergraph_W_TicketDetailRecord final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_TicketDetailRecord_C_ExecuteUbergraph_W_TicketDetailRecord) == 0x000004, "Wrong alignment on W_TicketDetailRecord_C_ExecuteUbergraph_W_TicketDetailRecord");
static_assert(sizeof(W_TicketDetailRecord_C_ExecuteUbergraph_W_TicketDetailRecord) == 0x000008, "Wrong size on W_TicketDetailRecord_C_ExecuteUbergraph_W_TicketDetailRecord");
static_assert(offsetof(W_TicketDetailRecord_C_ExecuteUbergraph_W_TicketDetailRecord, EntryPoint) == 0x000000, "Member 'W_TicketDetailRecord_C_ExecuteUbergraph_W_TicketDetailRecord::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_TicketDetailRecord_C_ExecuteUbergraph_W_TicketDetailRecord, Temp_bool_Variable) == 0x000004, "Member 'W_TicketDetailRecord_C_ExecuteUbergraph_W_TicketDetailRecord::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_TicketDetailRecord_C_ExecuteUbergraph_W_TicketDetailRecord, Temp_byte_Variable) == 0x000005, "Member 'W_TicketDetailRecord_C_ExecuteUbergraph_W_TicketDetailRecord::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_TicketDetailRecord_C_ExecuteUbergraph_W_TicketDetailRecord, Temp_byte_Variable_1) == 0x000006, "Member 'W_TicketDetailRecord_C_ExecuteUbergraph_W_TicketDetailRecord::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_TicketDetailRecord_C_ExecuteUbergraph_W_TicketDetailRecord, K2Node_Select_Default) == 0x000007, "Member 'W_TicketDetailRecord_C_ExecuteUbergraph_W_TicketDetailRecord::K2Node_Select_Default' has a wrong offset!");

// Function W_TicketDetailRecord.W_TicketDetailRecord_C.FillScoreValues
// 0x0018 (0x0018 - 0x0000)
struct W_TicketDetailRecord_C_FillScoreValues final
{
public:
	int32                                         Units;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UnitsTickets;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Absolute;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Abs_Int_ReturnValue;                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_TicketDetailRecord_C_FillScoreValues) == 0x000004, "Wrong alignment on W_TicketDetailRecord_C_FillScoreValues");
static_assert(sizeof(W_TicketDetailRecord_C_FillScoreValues) == 0x000018, "Wrong size on W_TicketDetailRecord_C_FillScoreValues");
static_assert(offsetof(W_TicketDetailRecord_C_FillScoreValues, Units) == 0x000000, "Member 'W_TicketDetailRecord_C_FillScoreValues::Units' has a wrong offset!");
static_assert(offsetof(W_TicketDetailRecord_C_FillScoreValues, UnitsTickets) == 0x000004, "Member 'W_TicketDetailRecord_C_FillScoreValues::UnitsTickets' has a wrong offset!");
static_assert(offsetof(W_TicketDetailRecord_C_FillScoreValues, Absolute) == 0x000008, "Member 'W_TicketDetailRecord_C_FillScoreValues::Absolute' has a wrong offset!");
static_assert(offsetof(W_TicketDetailRecord_C_FillScoreValues, CallFunc_Abs_Int_ReturnValue) == 0x00000C, "Member 'W_TicketDetailRecord_C_FillScoreValues::CallFunc_Abs_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_TicketDetailRecord_C_FillScoreValues, CallFunc_SelectInt_ReturnValue) == 0x000010, "Member 'W_TicketDetailRecord_C_FillScoreValues::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_TicketDetailRecord_C_FillScoreValues, CallFunc_Multiply_IntInt_ReturnValue) == 0x000014, "Member 'W_TicketDetailRecord_C_FillScoreValues::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");

// Function W_TicketDetailRecord.W_TicketDetailRecord_C.GetValues
// 0x000C (0x000C - 0x0000)
struct W_TicketDetailRecord_C_GetValues final
{
public:
	int32                                         Units;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UnitTickets;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Score;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_TicketDetailRecord_C_GetValues) == 0x000004, "Wrong alignment on W_TicketDetailRecord_C_GetValues");
static_assert(sizeof(W_TicketDetailRecord_C_GetValues) == 0x00000C, "Wrong size on W_TicketDetailRecord_C_GetValues");
static_assert(offsetof(W_TicketDetailRecord_C_GetValues, Units) == 0x000000, "Member 'W_TicketDetailRecord_C_GetValues::Units' has a wrong offset!");
static_assert(offsetof(W_TicketDetailRecord_C_GetValues, UnitTickets) == 0x000004, "Member 'W_TicketDetailRecord_C_GetValues::UnitTickets' has a wrong offset!");
static_assert(offsetof(W_TicketDetailRecord_C_GetValues, Score) == 0x000008, "Member 'W_TicketDetailRecord_C_GetValues::Score' has a wrong offset!");

// Function W_TicketDetailRecord.W_TicketDetailRecord_C.UpdateProgressBar
// 0x0004 (0x0004 - 0x0000)
struct W_TicketDetailRecord_C_UpdateProgressBar final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_TicketDetailRecord_C_UpdateProgressBar) == 0x000004, "Wrong alignment on W_TicketDetailRecord_C_UpdateProgressBar");
static_assert(sizeof(W_TicketDetailRecord_C_UpdateProgressBar) == 0x000004, "Wrong size on W_TicketDetailRecord_C_UpdateProgressBar");
static_assert(offsetof(W_TicketDetailRecord_C_UpdateProgressBar, Score) == 0x000000, "Member 'W_TicketDetailRecord_C_UpdateProgressBar::Score' has a wrong offset!");

// Function W_TicketDetailRecord.W_TicketDetailRecord_C.UnitTooltip
// 0x0008 (0x0008 - 0x0000)
struct W_TicketDetailRecord_C_UnitTooltip final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_TicketDetailRecord_C_UnitTooltip) == 0x000008, "Wrong alignment on W_TicketDetailRecord_C_UnitTooltip");
static_assert(sizeof(W_TicketDetailRecord_C_UnitTooltip) == 0x000008, "Wrong size on W_TicketDetailRecord_C_UnitTooltip");
static_assert(offsetof(W_TicketDetailRecord_C_UnitTooltip, ReturnValue) == 0x000000, "Member 'W_TicketDetailRecord_C_UnitTooltip::ReturnValue' has a wrong offset!");

// Function W_TicketDetailRecord.W_TicketDetailRecord_C.UnitTicketTooltip
// 0x0008 (0x0008 - 0x0000)
struct W_TicketDetailRecord_C_UnitTicketTooltip final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_TicketDetailRecord_C_UnitTicketTooltip) == 0x000008, "Wrong alignment on W_TicketDetailRecord_C_UnitTicketTooltip");
static_assert(sizeof(W_TicketDetailRecord_C_UnitTicketTooltip) == 0x000008, "Wrong size on W_TicketDetailRecord_C_UnitTicketTooltip");
static_assert(offsetof(W_TicketDetailRecord_C_UnitTicketTooltip, ReturnValue) == 0x000000, "Member 'W_TicketDetailRecord_C_UnitTicketTooltip::ReturnValue' has a wrong offset!");

// Function W_TicketDetailRecord.W_TicketDetailRecord_C.SumTicketTooltip
// 0x0008 (0x0008 - 0x0000)
struct W_TicketDetailRecord_C_SumTicketTooltip final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_TicketDetailRecord_C_SumTicketTooltip) == 0x000008, "Wrong alignment on W_TicketDetailRecord_C_SumTicketTooltip");
static_assert(sizeof(W_TicketDetailRecord_C_SumTicketTooltip) == 0x000008, "Wrong size on W_TicketDetailRecord_C_SumTicketTooltip");
static_assert(offsetof(W_TicketDetailRecord_C_SumTicketTooltip, ReturnValue) == 0x000000, "Member 'W_TicketDetailRecord_C_SumTicketTooltip::ReturnValue' has a wrong offset!");

// Function W_TicketDetailRecord.W_TicketDetailRecord_C.SetUnitTooltip
// 0x0018 (0x0018 - 0x0000)
struct W_TicketDetailRecord_C_SetUnitTooltip final
{
public:
	class FText                                   NewTooltip;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_TicketDetailRecord_C_SetUnitTooltip) == 0x000008, "Wrong alignment on W_TicketDetailRecord_C_SetUnitTooltip");
static_assert(sizeof(W_TicketDetailRecord_C_SetUnitTooltip) == 0x000018, "Wrong size on W_TicketDetailRecord_C_SetUnitTooltip");
static_assert(offsetof(W_TicketDetailRecord_C_SetUnitTooltip, NewTooltip) == 0x000000, "Member 'W_TicketDetailRecord_C_SetUnitTooltip::NewTooltip' has a wrong offset!");

// Function W_TicketDetailRecord.W_TicketDetailRecord_C.SetUnitTicketTooltip
// 0x0018 (0x0018 - 0x0000)
struct W_TicketDetailRecord_C_SetUnitTicketTooltip final
{
public:
	class FText                                   NewTooltip;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_TicketDetailRecord_C_SetUnitTicketTooltip) == 0x000008, "Wrong alignment on W_TicketDetailRecord_C_SetUnitTicketTooltip");
static_assert(sizeof(W_TicketDetailRecord_C_SetUnitTicketTooltip) == 0x000018, "Wrong size on W_TicketDetailRecord_C_SetUnitTicketTooltip");
static_assert(offsetof(W_TicketDetailRecord_C_SetUnitTicketTooltip, NewTooltip) == 0x000000, "Member 'W_TicketDetailRecord_C_SetUnitTicketTooltip::NewTooltip' has a wrong offset!");

// Function W_TicketDetailRecord.W_TicketDetailRecord_C.SetSumTicketTooltip
// 0x0018 (0x0018 - 0x0000)
struct W_TicketDetailRecord_C_SetSumTicketTooltip final
{
public:
	class FText                                   NewTooltip;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_TicketDetailRecord_C_SetSumTicketTooltip) == 0x000008, "Wrong alignment on W_TicketDetailRecord_C_SetSumTicketTooltip");
static_assert(sizeof(W_TicketDetailRecord_C_SetSumTicketTooltip) == 0x000018, "Wrong size on W_TicketDetailRecord_C_SetSumTicketTooltip");
static_assert(offsetof(W_TicketDetailRecord_C_SetSumTicketTooltip, NewTooltip) == 0x000000, "Member 'W_TicketDetailRecord_C_SetSumTicketTooltip::NewTooltip' has a wrong offset!");

}

