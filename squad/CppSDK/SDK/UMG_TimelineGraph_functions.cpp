#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UMG_TimelineGraph

#include "Basic.hpp"

#include "UMG_TimelineGraph_classes.hpp"
#include "UMG_TimelineGraph_parameters.hpp"


namespace SDK
{

// Function UMG_TimelineGraph.UMG_TimelineGraph_C.ExecuteUbergraph_UMG_TimelineGraph
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUMG_TimelineGraph_C::ExecuteUbergraph_UMG_TimelineGraph(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_TimelineGraph_C", "ExecuteUbergraph_UMG_TimelineGraph");

	Params::UMG_TimelineGraph_C_ExecuteUbergraph_UMG_TimelineGraph Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_TimelineGraph.UMG_TimelineGraph_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUMG_TimelineGraph_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_TimelineGraph_C", "Tick");

	Params::UMG_TimelineGraph_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_TimelineGraph.UMG_TimelineGraph_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UUMG_TimelineGraph_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_TimelineGraph_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UMG_TimelineGraph.UMG_TimelineGraph_C.Refresh
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UUMG_TimelineGraph_C::Refresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_TimelineGraph_C", "Refresh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UMG_TimelineGraph.UMG_TimelineGraph_C.UpdatePointerVisibility
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   LineDist                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUMG_TimelineGraph_C::UpdatePointerVisibility(float& LineDist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_TimelineGraph_C", "UpdatePointerVisibility");

	Params::UMG_TimelineGraph_C_UpdatePointerVisibility Parms{};

	Parms.LineDist = LineDist;

	UObject::ProcessEvent(Func, &Parms);

	LineDist = Parms.LineDist;
}


// Function UMG_TimelineGraph.UMG_TimelineGraph_C.UpdatePointsInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        StartPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           PrevPoints                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UUMG_TimelineGraph_C::UpdatePointsInfo(struct FVector2D& StartPoint, TArray<int32>& PrevPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_TimelineGraph_C", "UpdatePointsInfo");

	Params::UMG_TimelineGraph_C_UpdatePointsInfo Parms{};

	Parms.StartPoint = std::move(StartPoint);
	Parms.PrevPoints = std::move(PrevPoints);

	UObject::ProcessEvent(Func, &Parms);

	StartPoint = std::move(Parms.StartPoint);
	PrevPoints = std::move(Parms.PrevPoints);
}


// Function UMG_TimelineGraph.UMG_TimelineGraph_C.PresentPointInfo
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQTimelinePoint*                 NewPoint                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUMG_TimelineGraph_C::PresentPointInfo(class USQTimelinePoint* NewPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_TimelineGraph_C", "PresentPointInfo");

	Params::UMG_TimelineGraph_C_PresentPointInfo Parms{};

	Parms.NewPoint = NewPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_TimelineGraph.UMG_TimelineGraph_C.GetTimeAtPoint
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        PointLoc                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           PointIndexes                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   TeamId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUMG_TimelineGraph_C::GetTimeAtPoint(struct FVector2D& PointLoc, TArray<int32>& PointIndexes, int32& TeamId, float* Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_TimelineGraph_C", "GetTimeAtPoint");

	Params::UMG_TimelineGraph_C_GetTimeAtPoint Parms{};

	Parms.PointLoc = std::move(PointLoc);
	Parms.PointIndexes = std::move(PointIndexes);
	Parms.TeamId = TeamId;

	UObject::ProcessEvent(Func, &Parms);

	PointLoc = std::move(Parms.PointLoc);
	PointIndexes = std::move(Parms.PointIndexes);
	TeamId = Parms.TeamId;

	if (Time != nullptr)
		*Time = Parms.Time;
}

}

