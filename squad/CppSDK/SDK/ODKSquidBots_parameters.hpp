#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ODKSquidBots

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ODKSquidBots_structs.hpp"


namespace SDK::Params
{

// Function ODKSquidBots.ODKSquidBotsProjectInterface.CanUseFullAutoSounds
// 0x0001 (0x0001 - 0x0000)
struct ODKSquidBotsProjectInterface_CanUseFullAutoSounds final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKSquidBotsProjectInterface_CanUseFullAutoSounds) == 0x000001, "Wrong alignment on ODKSquidBotsProjectInterface_CanUseFullAutoSounds");
static_assert(sizeof(ODKSquidBotsProjectInterface_CanUseFullAutoSounds) == 0x000001, "Wrong size on ODKSquidBotsProjectInterface_CanUseFullAutoSounds");
static_assert(offsetof(ODKSquidBotsProjectInterface_CanUseFullAutoSounds, ReturnValue) == 0x000000, "Member 'ODKSquidBotsProjectInterface_CanUseFullAutoSounds::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKSquidBotsProjectInterface.GetSemiAutoSound
// 0x0018 (0x0018 - 0x0000)
struct ODKSquidBotsProjectInterface_GetSemiAutoSound final
{
public:
	const class UObject*                          StaticInfo;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          EquipableItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKSquidBotsProjectInterface_GetSemiAutoSound) == 0x000008, "Wrong alignment on ODKSquidBotsProjectInterface_GetSemiAutoSound");
static_assert(sizeof(ODKSquidBotsProjectInterface_GetSemiAutoSound) == 0x000018, "Wrong size on ODKSquidBotsProjectInterface_GetSemiAutoSound");
static_assert(offsetof(ODKSquidBotsProjectInterface_GetSemiAutoSound, StaticInfo) == 0x000000, "Member 'ODKSquidBotsProjectInterface_GetSemiAutoSound::StaticInfo' has a wrong offset!");
static_assert(offsetof(ODKSquidBotsProjectInterface_GetSemiAutoSound, EquipableItem) == 0x000008, "Member 'ODKSquidBotsProjectInterface_GetSemiAutoSound::EquipableItem' has a wrong offset!");
static_assert(offsetof(ODKSquidBotsProjectInterface_GetSemiAutoSound, ReturnValue) == 0x000010, "Member 'ODKSquidBotsProjectInterface_GetSemiAutoSound::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKAvatar.GetSquidBotsShowAimArrowsDebug
// 0x0001 (0x0001 - 0x0000)
struct ODKAvatar_GetSquidBotsShowAimArrowsDebug final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKAvatar_GetSquidBotsShowAimArrowsDebug) == 0x000001, "Wrong alignment on ODKAvatar_GetSquidBotsShowAimArrowsDebug");
static_assert(sizeof(ODKAvatar_GetSquidBotsShowAimArrowsDebug) == 0x000001, "Wrong size on ODKAvatar_GetSquidBotsShowAimArrowsDebug");
static_assert(offsetof(ODKAvatar_GetSquidBotsShowAimArrowsDebug, ReturnValue) == 0x000000, "Member 'ODKAvatar_GetSquidBotsShowAimArrowsDebug::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKAvatar.GetSquidBotsShowAimToleranceConesDebug
// 0x0001 (0x0001 - 0x0000)
struct ODKAvatar_GetSquidBotsShowAimToleranceConesDebug final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKAvatar_GetSquidBotsShowAimToleranceConesDebug) == 0x000001, "Wrong alignment on ODKAvatar_GetSquidBotsShowAimToleranceConesDebug");
static_assert(sizeof(ODKAvatar_GetSquidBotsShowAimToleranceConesDebug) == 0x000001, "Wrong size on ODKAvatar_GetSquidBotsShowAimToleranceConesDebug");
static_assert(offsetof(ODKAvatar_GetSquidBotsShowAimToleranceConesDebug, ReturnValue) == 0x000000, "Member 'ODKAvatar_GetSquidBotsShowAimToleranceConesDebug::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKAvatar.OnRep_HealthChanged
// 0x0004 (0x0004 - 0x0000)
struct ODKAvatar_OnRep_HealthChanged final
{
public:
	float                                         PreviousHealth;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKAvatar_OnRep_HealthChanged) == 0x000004, "Wrong alignment on ODKAvatar_OnRep_HealthChanged");
static_assert(sizeof(ODKAvatar_OnRep_HealthChanged) == 0x000004, "Wrong size on ODKAvatar_OnRep_HealthChanged");
static_assert(offsetof(ODKAvatar_OnRep_HealthChanged, PreviousHealth) == 0x000000, "Member 'ODKAvatar_OnRep_HealthChanged::PreviousHealth' has a wrong offset!");

// Function ODKSquidBots.ODKAvatar.OnToggleShowAimArrowsDebug
// 0x0001 (0x0001 - 0x0000)
struct ODKAvatar_OnToggleShowAimArrowsDebug final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKAvatar_OnToggleShowAimArrowsDebug) == 0x000001, "Wrong alignment on ODKAvatar_OnToggleShowAimArrowsDebug");
static_assert(sizeof(ODKAvatar_OnToggleShowAimArrowsDebug) == 0x000001, "Wrong size on ODKAvatar_OnToggleShowAimArrowsDebug");
static_assert(offsetof(ODKAvatar_OnToggleShowAimArrowsDebug, bEnabled) == 0x000000, "Member 'ODKAvatar_OnToggleShowAimArrowsDebug::bEnabled' has a wrong offset!");

// Function ODKSquidBots.ODKAvatar.SetHealth
// 0x0004 (0x0004 - 0x0000)
struct ODKAvatar_SetHealth final
{
public:
	float                                         InHealth;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKAvatar_SetHealth) == 0x000004, "Wrong alignment on ODKAvatar_SetHealth");
static_assert(sizeof(ODKAvatar_SetHealth) == 0x000004, "Wrong size on ODKAvatar_SetHealth");
static_assert(offsetof(ODKAvatar_SetHealth, InHealth) == 0x000000, "Member 'ODKAvatar_SetHealth::InHealth' has a wrong offset!");

// Function ODKSquidBots.ODKAvatar.GetHealth
// 0x0004 (0x0004 - 0x0000)
struct ODKAvatar_GetHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKAvatar_GetHealth) == 0x000004, "Wrong alignment on ODKAvatar_GetHealth");
static_assert(sizeof(ODKAvatar_GetHealth) == 0x000004, "Wrong size on ODKAvatar_GetHealth");
static_assert(offsetof(ODKAvatar_GetHealth, ReturnValue) == 0x000000, "Member 'ODKAvatar_GetHealth::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKGenericItem.SpawnGenericItem
// 0x0070 (0x0070 - 0x0000)
struct ODKGenericItem_SpawnGenericItem final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AODKGenericItem>            InGenericItemClass;                                // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     InSpawnClass;                                      // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0020(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 InOwner;                                           // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  InInstigator;                                      // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UODKInventoryItem*                      InInventoryItem;                                   // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSeed;                                            // 0x0068(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ODKGenericItem_SpawnGenericItem) == 0x000010, "Wrong alignment on ODKGenericItem_SpawnGenericItem");
static_assert(sizeof(ODKGenericItem_SpawnGenericItem) == 0x000070, "Wrong size on ODKGenericItem_SpawnGenericItem");
static_assert(offsetof(ODKGenericItem_SpawnGenericItem, InWorldContextObject) == 0x000000, "Member 'ODKGenericItem_SpawnGenericItem::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(ODKGenericItem_SpawnGenericItem, InGenericItemClass) == 0x000008, "Member 'ODKGenericItem_SpawnGenericItem::InGenericItemClass' has a wrong offset!");
static_assert(offsetof(ODKGenericItem_SpawnGenericItem, InSpawnClass) == 0x000010, "Member 'ODKGenericItem_SpawnGenericItem::InSpawnClass' has a wrong offset!");
static_assert(offsetof(ODKGenericItem_SpawnGenericItem, InTransform) == 0x000020, "Member 'ODKGenericItem_SpawnGenericItem::InTransform' has a wrong offset!");
static_assert(offsetof(ODKGenericItem_SpawnGenericItem, InOwner) == 0x000050, "Member 'ODKGenericItem_SpawnGenericItem::InOwner' has a wrong offset!");
static_assert(offsetof(ODKGenericItem_SpawnGenericItem, InInstigator) == 0x000058, "Member 'ODKGenericItem_SpawnGenericItem::InInstigator' has a wrong offset!");
static_assert(offsetof(ODKGenericItem_SpawnGenericItem, InInventoryItem) == 0x000060, "Member 'ODKGenericItem_SpawnGenericItem::InInventoryItem' has a wrong offset!");
static_assert(offsetof(ODKGenericItem_SpawnGenericItem, InSeed) == 0x000068, "Member 'ODKGenericItem_SpawnGenericItem::InSeed' has a wrong offset!");

// Function ODKSquidBots.ODKGenericItem.CanFire
// 0x0001 (0x0001 - 0x0000)
struct ODKGenericItem_CanFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKGenericItem_CanFire) == 0x000001, "Wrong alignment on ODKGenericItem_CanFire");
static_assert(sizeof(ODKGenericItem_CanFire) == 0x000001, "Wrong size on ODKGenericItem_CanFire");
static_assert(offsetof(ODKGenericItem_CanFire, ReturnValue) == 0x000000, "Member 'ODKGenericItem_CanFire::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKGenericItem.ClientTick
// 0x0004 (0x0004 - 0x0000)
struct ODKGenericItem_ClientTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKGenericItem_ClientTick) == 0x000004, "Wrong alignment on ODKGenericItem_ClientTick");
static_assert(sizeof(ODKGenericItem_ClientTick) == 0x000004, "Wrong size on ODKGenericItem_ClientTick");
static_assert(offsetof(ODKGenericItem_ClientTick, DeltaSeconds) == 0x000000, "Member 'ODKGenericItem_ClientTick::DeltaSeconds' has a wrong offset!");

// Function ODKSquidBots.ODKGenericItem.CycleFire
// 0x0001 (0x0001 - 0x0000)
struct ODKGenericItem_CycleFire final
{
public:
	bool                                          bIsAutomaticFire;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKGenericItem_CycleFire) == 0x000001, "Wrong alignment on ODKGenericItem_CycleFire");
static_assert(sizeof(ODKGenericItem_CycleFire) == 0x000001, "Wrong size on ODKGenericItem_CycleFire");
static_assert(offsetof(ODKGenericItem_CycleFire, bIsAutomaticFire) == 0x000000, "Member 'ODKGenericItem_CycleFire::bIsAutomaticFire' has a wrong offset!");

// Function ODKSquidBots.ODKGenericItem.InstantFire
// 0x0008 (0x0008 - 0x0000)
struct ODKGenericItem_InstantFire final
{
public:
	const class UODKFireEvent*                    FireEvent;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKGenericItem_InstantFire) == 0x000008, "Wrong alignment on ODKGenericItem_InstantFire");
static_assert(sizeof(ODKGenericItem_InstantFire) == 0x000008, "Wrong size on ODKGenericItem_InstantFire");
static_assert(offsetof(ODKGenericItem_InstantFire, FireEvent) == 0x000000, "Member 'ODKGenericItem_InstantFire::FireEvent' has a wrong offset!");

// Function ODKSquidBots.ODKGenericItem.MulticastFire
// 0x0020 (0x0020 - 0x0000)
struct ODKGenericItem_MulticastFire final
{
public:
	struct FODKNetSerializedObject                SerializedFireEvent;                               // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsAutomaticFire;                                  // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ODKGenericItem_MulticastFire) == 0x000008, "Wrong alignment on ODKGenericItem_MulticastFire");
static_assert(sizeof(ODKGenericItem_MulticastFire) == 0x000020, "Wrong size on ODKGenericItem_MulticastFire");
static_assert(offsetof(ODKGenericItem_MulticastFire, SerializedFireEvent) == 0x000000, "Member 'ODKGenericItem_MulticastFire::SerializedFireEvent' has a wrong offset!");
static_assert(offsetof(ODKGenericItem_MulticastFire, bIsAutomaticFire) == 0x000018, "Member 'ODKGenericItem_MulticastFire::bIsAutomaticFire' has a wrong offset!");

// Function ODKSquidBots.ODKGenericItem.PrepareFire
// 0x0008 (0x0008 - 0x0000)
struct ODKGenericItem_PrepareFire final
{
public:
	class UODKFireEvent*                          SerializationObject;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKGenericItem_PrepareFire) == 0x000008, "Wrong alignment on ODKGenericItem_PrepareFire");
static_assert(sizeof(ODKGenericItem_PrepareFire) == 0x000008, "Wrong size on ODKGenericItem_PrepareFire");
static_assert(offsetof(ODKGenericItem_PrepareFire, SerializationObject) == 0x000000, "Member 'ODKGenericItem_PrepareFire::SerializationObject' has a wrong offset!");

// Function ODKSquidBots.ODKGenericItem.ServerTick
// 0x0004 (0x0004 - 0x0000)
struct ODKGenericItem_ServerTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKGenericItem_ServerTick) == 0x000004, "Wrong alignment on ODKGenericItem_ServerTick");
static_assert(sizeof(ODKGenericItem_ServerTick) == 0x000004, "Wrong size on ODKGenericItem_ServerTick");
static_assert(offsetof(ODKGenericItem_ServerTick, DeltaSeconds) == 0x000000, "Member 'ODKGenericItem_ServerTick::DeltaSeconds' has a wrong offset!");

// Function ODKSquidBots.ODKGenericItem.GetTimeBetweenAutomaticShots
// 0x0004 (0x0004 - 0x0000)
struct ODKGenericItem_GetTimeBetweenAutomaticShots final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKGenericItem_GetTimeBetweenAutomaticShots) == 0x000004, "Wrong alignment on ODKGenericItem_GetTimeBetweenAutomaticShots");
static_assert(sizeof(ODKGenericItem_GetTimeBetweenAutomaticShots) == 0x000004, "Wrong size on ODKGenericItem_GetTimeBetweenAutomaticShots");
static_assert(offsetof(ODKGenericItem_GetTimeBetweenAutomaticShots, ReturnValue) == 0x000000, "Member 'ODKGenericItem_GetTimeBetweenAutomaticShots::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKGenericItem.GetTimeBetweenManualShots
// 0x0004 (0x0004 - 0x0000)
struct ODKGenericItem_GetTimeBetweenManualShots final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKGenericItem_GetTimeBetweenManualShots) == 0x000004, "Wrong alignment on ODKGenericItem_GetTimeBetweenManualShots");
static_assert(sizeof(ODKGenericItem_GetTimeBetweenManualShots) == 0x000004, "Wrong size on ODKGenericItem_GetTimeBetweenManualShots");
static_assert(offsetof(ODKGenericItem_GetTimeBetweenManualShots, ReturnValue) == 0x000000, "Member 'ODKGenericItem_GetTimeBetweenManualShots::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKGenericItem.GetUsingAutomaticFire
// 0x0001 (0x0001 - 0x0000)
struct ODKGenericItem_GetUsingAutomaticFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKGenericItem_GetUsingAutomaticFire) == 0x000001, "Wrong alignment on ODKGenericItem_GetUsingAutomaticFire");
static_assert(sizeof(ODKGenericItem_GetUsingAutomaticFire) == 0x000001, "Wrong size on ODKGenericItem_GetUsingAutomaticFire");
static_assert(offsetof(ODKGenericItem_GetUsingAutomaticFire, ReturnValue) == 0x000000, "Member 'ODKGenericItem_GetUsingAutomaticFire::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKNetSerializedObjectHelpers.ReadObject
// 0x0028 (0x0028 - 0x0000)
struct ODKNetSerializedObjectHelpers_ReadObject final
{
public:
	struct FODKNetSerializedObject                NetSerializedObject;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                OutObjectToWriteInto;                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKNetSerializedObjectHelpers_ReadObject) == 0x000008, "Wrong alignment on ODKNetSerializedObjectHelpers_ReadObject");
static_assert(sizeof(ODKNetSerializedObjectHelpers_ReadObject) == 0x000028, "Wrong size on ODKNetSerializedObjectHelpers_ReadObject");
static_assert(offsetof(ODKNetSerializedObjectHelpers_ReadObject, NetSerializedObject) == 0x000000, "Member 'ODKNetSerializedObjectHelpers_ReadObject::NetSerializedObject' has a wrong offset!");
static_assert(offsetof(ODKNetSerializedObjectHelpers_ReadObject, OutObjectToWriteInto) == 0x000018, "Member 'ODKNetSerializedObjectHelpers_ReadObject::OutObjectToWriteInto' has a wrong offset!");
static_assert(offsetof(ODKNetSerializedObjectHelpers_ReadObject, WorldContextObject) == 0x000020, "Member 'ODKNetSerializedObjectHelpers_ReadObject::WorldContextObject' has a wrong offset!");

// Function ODKSquidBots.ODKNetSerializedObjectHelpers.WriteObject
// 0x0028 (0x0028 - 0x0000)
struct ODKNetSerializedObjectHelpers_WriteObject final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FODKNetSerializedObject                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKNetSerializedObjectHelpers_WriteObject) == 0x000008, "Wrong alignment on ODKNetSerializedObjectHelpers_WriteObject");
static_assert(sizeof(ODKNetSerializedObjectHelpers_WriteObject) == 0x000028, "Wrong size on ODKNetSerializedObjectHelpers_WriteObject");
static_assert(offsetof(ODKNetSerializedObjectHelpers_WriteObject, InObject) == 0x000000, "Member 'ODKNetSerializedObjectHelpers_WriteObject::InObject' has a wrong offset!");
static_assert(offsetof(ODKNetSerializedObjectHelpers_WriteObject, WorldContextObject) == 0x000008, "Member 'ODKNetSerializedObjectHelpers_WriteObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ODKNetSerializedObjectHelpers_WriteObject, ReturnValue) == 0x000010, "Member 'ODKNetSerializedObjectHelpers_WriteObject::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKSeededRandom.GetRandomSeed
// 0x0004 (0x0004 - 0x0000)
struct ODKSeededRandom_GetRandomSeed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKSeededRandom_GetRandomSeed) == 0x000004, "Wrong alignment on ODKSeededRandom_GetRandomSeed");
static_assert(sizeof(ODKSeededRandom_GetRandomSeed) == 0x000004, "Wrong size on ODKSeededRandom_GetRandomSeed");
static_assert(offsetof(ODKSeededRandom_GetRandomSeed, ReturnValue) == 0x000000, "Member 'ODKSeededRandom_GetRandomSeed::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKSequencerHelpers.GetFrameNum
// 0x0008 (0x0008 - 0x0000)
struct ODKSequencerHelpers_GetFrameNum final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKSequencerHelpers_GetFrameNum) == 0x000008, "Wrong alignment on ODKSequencerHelpers_GetFrameNum");
static_assert(sizeof(ODKSequencerHelpers_GetFrameNum) == 0x000008, "Wrong size on ODKSequencerHelpers_GetFrameNum");
static_assert(offsetof(ODKSequencerHelpers_GetFrameNum, ReturnValue) == 0x000000, "Member 'ODKSequencerHelpers_GetFrameNum::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKSequencerHelpers.GetRandomSeedAtFrame
// 0x0018 (0x0018 - 0x0000)
struct ODKSequencerHelpers_GetRandomSeedAtFrame final
{
public:
	TScriptInterface<class IODKSeededRandom>      SeededRandom;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ODKSequencerHelpers_GetRandomSeedAtFrame) == 0x000008, "Wrong alignment on ODKSequencerHelpers_GetRandomSeedAtFrame");
static_assert(sizeof(ODKSequencerHelpers_GetRandomSeedAtFrame) == 0x000018, "Wrong size on ODKSequencerHelpers_GetRandomSeedAtFrame");
static_assert(offsetof(ODKSequencerHelpers_GetRandomSeedAtFrame, SeededRandom) == 0x000000, "Member 'ODKSequencerHelpers_GetRandomSeedAtFrame::SeededRandom' has a wrong offset!");
static_assert(offsetof(ODKSequencerHelpers_GetRandomSeedAtFrame, ReturnValue) == 0x000010, "Member 'ODKSequencerHelpers_GetRandomSeedAtFrame::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKSequencerHelpers.GetTime
// 0x0010 (0x0010 - 0x0000)
struct ODKSequencerHelpers_GetTime final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ODKSequencerHelpers_GetTime) == 0x000008, "Wrong alignment on ODKSequencerHelpers_GetTime");
static_assert(sizeof(ODKSequencerHelpers_GetTime) == 0x000010, "Wrong size on ODKSequencerHelpers_GetTime");
static_assert(offsetof(ODKSequencerHelpers_GetTime, WorldContextObject) == 0x000000, "Member 'ODKSequencerHelpers_GetTime::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ODKSequencerHelpers_GetTime, ReturnValue) == 0x000008, "Member 'ODKSequencerHelpers_GetTime::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKSquidBotsBlueprintLibrary.GetAllActorsOfClass
// 0x0020 (0x0020 - 0x0000)
struct ODKSquidBotsBlueprintLibrary_GetAllActorsOfClass final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKSquidBotsBlueprintLibrary_GetAllActorsOfClass) == 0x000008, "Wrong alignment on ODKSquidBotsBlueprintLibrary_GetAllActorsOfClass");
static_assert(sizeof(ODKSquidBotsBlueprintLibrary_GetAllActorsOfClass) == 0x000020, "Wrong size on ODKSquidBotsBlueprintLibrary_GetAllActorsOfClass");
static_assert(offsetof(ODKSquidBotsBlueprintLibrary_GetAllActorsOfClass, WorldContextObject) == 0x000000, "Member 'ODKSquidBotsBlueprintLibrary_GetAllActorsOfClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ODKSquidBotsBlueprintLibrary_GetAllActorsOfClass, ActorClass) == 0x000008, "Member 'ODKSquidBotsBlueprintLibrary_GetAllActorsOfClass::ActorClass' has a wrong offset!");
static_assert(offsetof(ODKSquidBotsBlueprintLibrary_GetAllActorsOfClass, OutActors) == 0x000010, "Member 'ODKSquidBotsBlueprintLibrary_GetAllActorsOfClass::OutActors' has a wrong offset!");

// Function ODKSquidBots.ODKSquidBotsBlueprintLibrary.GetBlackboard
// 0x0010 (0x0010 - 0x0000)
struct ODKSquidBotsBlueprintLibrary_GetBlackboard final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlackboardComponent*                   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKSquidBotsBlueprintLibrary_GetBlackboard) == 0x000008, "Wrong alignment on ODKSquidBotsBlueprintLibrary_GetBlackboard");
static_assert(sizeof(ODKSquidBotsBlueprintLibrary_GetBlackboard) == 0x000010, "Wrong size on ODKSquidBotsBlueprintLibrary_GetBlackboard");
static_assert(offsetof(ODKSquidBotsBlueprintLibrary_GetBlackboard, Actor) == 0x000000, "Member 'ODKSquidBotsBlueprintLibrary_GetBlackboard::Actor' has a wrong offset!");
static_assert(offsetof(ODKSquidBotsBlueprintLibrary_GetBlackboard, ReturnValue) == 0x000008, "Member 'ODKSquidBotsBlueprintLibrary_GetBlackboard::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKSquidBotsBlueprintLibrary.GetGameMode
// 0x0010 (0x0010 - 0x0000)
struct ODKSquidBotsBlueprintLibrary_GetGameMode final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameModeBase*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKSquidBotsBlueprintLibrary_GetGameMode) == 0x000008, "Wrong alignment on ODKSquidBotsBlueprintLibrary_GetGameMode");
static_assert(sizeof(ODKSquidBotsBlueprintLibrary_GetGameMode) == 0x000010, "Wrong size on ODKSquidBotsBlueprintLibrary_GetGameMode");
static_assert(offsetof(ODKSquidBotsBlueprintLibrary_GetGameMode, WorldContextObject) == 0x000000, "Member 'ODKSquidBotsBlueprintLibrary_GetGameMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ODKSquidBotsBlueprintLibrary_GetGameMode, ReturnValue) == 0x000008, "Member 'ODKSquidBotsBlueprintLibrary_GetGameMode::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKSquidBotsBlueprintLibrary.GetInstigatorOrSelf
// 0x0010 (0x0010 - 0x0000)
struct ODKSquidBotsBlueprintLibrary_GetInstigatorOrSelf final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKSquidBotsBlueprintLibrary_GetInstigatorOrSelf) == 0x000008, "Wrong alignment on ODKSquidBotsBlueprintLibrary_GetInstigatorOrSelf");
static_assert(sizeof(ODKSquidBotsBlueprintLibrary_GetInstigatorOrSelf) == 0x000010, "Wrong size on ODKSquidBotsBlueprintLibrary_GetInstigatorOrSelf");
static_assert(offsetof(ODKSquidBotsBlueprintLibrary_GetInstigatorOrSelf, Actor) == 0x000000, "Member 'ODKSquidBotsBlueprintLibrary_GetInstigatorOrSelf::Actor' has a wrong offset!");
static_assert(offsetof(ODKSquidBotsBlueprintLibrary_GetInstigatorOrSelf, ReturnValue) == 0x000008, "Member 'ODKSquidBotsBlueprintLibrary_GetInstigatorOrSelf::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKSquidBotsBlueprintLibrary.IsCompilingBlueprint
// 0x0001 (0x0001 - 0x0000)
struct ODKSquidBotsBlueprintLibrary_IsCompilingBlueprint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKSquidBotsBlueprintLibrary_IsCompilingBlueprint) == 0x000001, "Wrong alignment on ODKSquidBotsBlueprintLibrary_IsCompilingBlueprint");
static_assert(sizeof(ODKSquidBotsBlueprintLibrary_IsCompilingBlueprint) == 0x000001, "Wrong size on ODKSquidBotsBlueprintLibrary_IsCompilingBlueprint");
static_assert(offsetof(ODKSquidBotsBlueprintLibrary_IsCompilingBlueprint, ReturnValue) == 0x000000, "Member 'ODKSquidBotsBlueprintLibrary_IsCompilingBlueprint::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKSquidBotsBlueprintLibrary.IsEditor
// 0x0001 (0x0001 - 0x0000)
struct ODKSquidBotsBlueprintLibrary_IsEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKSquidBotsBlueprintLibrary_IsEditor) == 0x000001, "Wrong alignment on ODKSquidBotsBlueprintLibrary_IsEditor");
static_assert(sizeof(ODKSquidBotsBlueprintLibrary_IsEditor) == 0x000001, "Wrong size on ODKSquidBotsBlueprintLibrary_IsEditor");
static_assert(offsetof(ODKSquidBotsBlueprintLibrary_IsEditor, ReturnValue) == 0x000000, "Member 'ODKSquidBotsBlueprintLibrary_IsEditor::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKSquidBotsBPLibrary.GetRandomInt32
// 0x0004 (0x0004 - 0x0000)
struct ODKSquidBotsBPLibrary_GetRandomInt32 final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKSquidBotsBPLibrary_GetRandomInt32) == 0x000004, "Wrong alignment on ODKSquidBotsBPLibrary_GetRandomInt32");
static_assert(sizeof(ODKSquidBotsBPLibrary_GetRandomInt32) == 0x000004, "Wrong size on ODKSquidBotsBPLibrary_GetRandomInt32");
static_assert(offsetof(ODKSquidBotsBPLibrary_GetRandomInt32, ReturnValue) == 0x000000, "Member 'ODKSquidBotsBPLibrary_GetRandomInt32::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKSquidBotsBPLibrary.IsEditorTime
// 0x0001 (0x0001 - 0x0000)
struct ODKSquidBotsBPLibrary_IsEditorTime final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKSquidBotsBPLibrary_IsEditorTime) == 0x000001, "Wrong alignment on ODKSquidBotsBPLibrary_IsEditorTime");
static_assert(sizeof(ODKSquidBotsBPLibrary_IsEditorTime) == 0x000001, "Wrong size on ODKSquidBotsBPLibrary_IsEditorTime");
static_assert(offsetof(ODKSquidBotsBPLibrary_IsEditorTime, ReturnValue) == 0x000000, "Member 'ODKSquidBotsBPLibrary_IsEditorTime::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKSquidBotsSettings.GetSquidBotsProjectImplementationBP
// 0x0008 (0x0008 - 0x0000)
struct ODKSquidBotsSettings_GetSquidBotsProjectImplementationBP final
{
public:
	const class UODKSquidBotsProjectInterface*    ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKSquidBotsSettings_GetSquidBotsProjectImplementationBP) == 0x000008, "Wrong alignment on ODKSquidBotsSettings_GetSquidBotsProjectImplementationBP");
static_assert(sizeof(ODKSquidBotsSettings_GetSquidBotsProjectImplementationBP) == 0x000008, "Wrong size on ODKSquidBotsSettings_GetSquidBotsProjectImplementationBP");
static_assert(offsetof(ODKSquidBotsSettings_GetSquidBotsProjectImplementationBP, ReturnValue) == 0x000000, "Member 'ODKSquidBotsSettings_GetSquidBotsProjectImplementationBP::ReturnValue' has a wrong offset!");

// Function ODKSquidBots.ODKSuppressionNotificationInterface.Suppress
// 0x0028 (0x0028 - 0x0000)
struct ODKSuppressionNotificationInterface_Suppress final
{
public:
	struct FVector                                ProjectileOrigin;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProjectileDirection;                               // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ProjectileClass;                                   // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Instigator;                                        // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKSuppressionNotificationInterface_Suppress) == 0x000008, "Wrong alignment on ODKSuppressionNotificationInterface_Suppress");
static_assert(sizeof(ODKSuppressionNotificationInterface_Suppress) == 0x000028, "Wrong size on ODKSuppressionNotificationInterface_Suppress");
static_assert(offsetof(ODKSuppressionNotificationInterface_Suppress, ProjectileOrigin) == 0x000000, "Member 'ODKSuppressionNotificationInterface_Suppress::ProjectileOrigin' has a wrong offset!");
static_assert(offsetof(ODKSuppressionNotificationInterface_Suppress, ProjectileDirection) == 0x00000C, "Member 'ODKSuppressionNotificationInterface_Suppress::ProjectileDirection' has a wrong offset!");
static_assert(offsetof(ODKSuppressionNotificationInterface_Suppress, ProjectileClass) == 0x000018, "Member 'ODKSuppressionNotificationInterface_Suppress::ProjectileClass' has a wrong offset!");
static_assert(offsetof(ODKSuppressionNotificationInterface_Suppress, Instigator) == 0x000020, "Member 'ODKSuppressionNotificationInterface_Suppress::Instigator' has a wrong offset!");

// Function ODKSquidBots.ODKSuppressionNotificationInterface.DoesComponentReceiveSuppression
// 0x0010 (0x0010 - 0x0000)
struct ODKSuppressionNotificationInterface_DoesComponentReceiveSuppression final
{
public:
	const class UPrimitiveComponent*              Component;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ODKSuppressionNotificationInterface_DoesComponentReceiveSuppression) == 0x000008, "Wrong alignment on ODKSuppressionNotificationInterface_DoesComponentReceiveSuppression");
static_assert(sizeof(ODKSuppressionNotificationInterface_DoesComponentReceiveSuppression) == 0x000010, "Wrong size on ODKSuppressionNotificationInterface_DoesComponentReceiveSuppression");
static_assert(offsetof(ODKSuppressionNotificationInterface_DoesComponentReceiveSuppression, Component) == 0x000000, "Member 'ODKSuppressionNotificationInterface_DoesComponentReceiveSuppression::Component' has a wrong offset!");
static_assert(offsetof(ODKSuppressionNotificationInterface_DoesComponentReceiveSuppression, ReturnValue) == 0x000008, "Member 'ODKSuppressionNotificationInterface_DoesComponentReceiveSuppression::ReturnValue' has a wrong offset!");

}

