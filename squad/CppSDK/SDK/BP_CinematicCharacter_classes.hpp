#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CinematicCharacter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ESQBiome_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CinematicCharacter.BP_CinematicCharacter_C
// 0x0100 (0x0328 - 0x0228)
class ABP_CinematicCharacter_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0228(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   WeaponChildActor;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 EquippedItem;                                      // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   CineCamera;                                        // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DetectionSphere;                                   // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URadialForceComponent*                  RadialForce;                                       // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SoldierMesh;                                       // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SQRoleSettings_C*                   KitData;                                           // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESQBiome                                      Variant;                                           // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Animation;                                         // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         AnimPosition;                                      // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimationRate;                                     // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              EquippedItemIndex;                                 // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          FallbackItemMesh;                                  // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          WeaponAnimationBasePose;                           // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Weapons_Marketing_C*                WeaponChildActorRef;                               // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowWeapon;                                        // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AttachWeaponToWeaponSocket;                        // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C2[0x6];                                      // 0x02C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMesh*>                  Hands_W;                                           // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USkeletalMesh*>                  Hands_BL;                                          // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_MutableSoldier_C*                   PlayerReference;                                   // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               HeadRotation;                                      // 0x02F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsTracking;                                        // 0x02FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldTrackPlayer;                                 // 0x02FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UsedWithSequencer;                                 // 0x02FE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseFirstPersonCamera;                              // 0x02FF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AlignToGround;                                     // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsMainMenu;                                        // 0x0301(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_302[0x6];                                      // 0x0302(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             FiringSound;                                       // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        MuzzleFlashParticle;                               // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ProjectileImpactParticle;                          // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ProjectileImpactSoundEffect;                       // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_CinematicCharacter(int32 EntryPoint);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ShowLivelink();
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveBeginPlay();
	void StartRagdoll();
	void Gore();
	void BndEvt__detectionSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ReceiveTick(float DeltaSeconds);
	void FireWeapon();
	void TrackPlayer();
	void BndEvt__detectionSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ClientReceiveDamage(class AActor* NewParam);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CinematicCharacter_C">();
	}
	static class ABP_CinematicCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CinematicCharacter_C>();
	}
};
static_assert(alignof(ABP_CinematicCharacter_C) == 0x000008, "Wrong alignment on ABP_CinematicCharacter_C");
static_assert(sizeof(ABP_CinematicCharacter_C) == 0x000328, "Wrong size on ABP_CinematicCharacter_C");
static_assert(offsetof(ABP_CinematicCharacter_C, UberGraphFrame) == 0x000228, "Member 'ABP_CinematicCharacter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, WeaponChildActor) == 0x000230, "Member 'ABP_CinematicCharacter_C::WeaponChildActor' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, EquippedItem) == 0x000238, "Member 'ABP_CinematicCharacter_C::EquippedItem' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, CineCamera) == 0x000240, "Member 'ABP_CinematicCharacter_C::CineCamera' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, SpringArm) == 0x000248, "Member 'ABP_CinematicCharacter_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, DetectionSphere) == 0x000250, "Member 'ABP_CinematicCharacter_C::DetectionSphere' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, Arrow) == 0x000258, "Member 'ABP_CinematicCharacter_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, RadialForce) == 0x000260, "Member 'ABP_CinematicCharacter_C::RadialForce' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, ParticleSystem) == 0x000268, "Member 'ABP_CinematicCharacter_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, SoldierMesh) == 0x000270, "Member 'ABP_CinematicCharacter_C::SoldierMesh' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, DefaultSceneRoot) == 0x000278, "Member 'ABP_CinematicCharacter_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, KitData) == 0x000280, "Member 'ABP_CinematicCharacter_C::KitData' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, Variant) == 0x000288, "Member 'ABP_CinematicCharacter_C::Variant' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, Animation) == 0x000290, "Member 'ABP_CinematicCharacter_C::Animation' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, AnimPosition) == 0x000298, "Member 'ABP_CinematicCharacter_C::AnimPosition' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, AnimationRate) == 0x00029C, "Member 'ABP_CinematicCharacter_C::AnimationRate' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, EquippedItemIndex) == 0x0002A0, "Member 'ABP_CinematicCharacter_C::EquippedItemIndex' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, FallbackItemMesh) == 0x0002A8, "Member 'ABP_CinematicCharacter_C::FallbackItemMesh' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, WeaponAnimationBasePose) == 0x0002B0, "Member 'ABP_CinematicCharacter_C::WeaponAnimationBasePose' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, WeaponChildActorRef) == 0x0002B8, "Member 'ABP_CinematicCharacter_C::WeaponChildActorRef' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, ShowWeapon) == 0x0002C0, "Member 'ABP_CinematicCharacter_C::ShowWeapon' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, AttachWeaponToWeaponSocket) == 0x0002C1, "Member 'ABP_CinematicCharacter_C::AttachWeaponToWeaponSocket' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, Hands_W) == 0x0002C8, "Member 'ABP_CinematicCharacter_C::Hands_W' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, Hands_BL) == 0x0002D8, "Member 'ABP_CinematicCharacter_C::Hands_BL' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, PlayerReference) == 0x0002E8, "Member 'ABP_CinematicCharacter_C::PlayerReference' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, HeadRotation) == 0x0002F0, "Member 'ABP_CinematicCharacter_C::HeadRotation' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, IsTracking) == 0x0002FC, "Member 'ABP_CinematicCharacter_C::IsTracking' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, ShouldTrackPlayer) == 0x0002FD, "Member 'ABP_CinematicCharacter_C::ShouldTrackPlayer' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, UsedWithSequencer) == 0x0002FE, "Member 'ABP_CinematicCharacter_C::UsedWithSequencer' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, UseFirstPersonCamera) == 0x0002FF, "Member 'ABP_CinematicCharacter_C::UseFirstPersonCamera' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, AlignToGround) == 0x000300, "Member 'ABP_CinematicCharacter_C::AlignToGround' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, IsMainMenu) == 0x000301, "Member 'ABP_CinematicCharacter_C::IsMainMenu' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, FiringSound) == 0x000308, "Member 'ABP_CinematicCharacter_C::FiringSound' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, MuzzleFlashParticle) == 0x000310, "Member 'ABP_CinematicCharacter_C::MuzzleFlashParticle' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, ProjectileImpactParticle) == 0x000318, "Member 'ABP_CinematicCharacter_C::ProjectileImpactParticle' has a wrong offset!");
static_assert(offsetof(ABP_CinematicCharacter_C, ProjectileImpactSoundEffect) == 0x000320, "Member 'ABP_CinematicCharacter_C::ProjectileImpactSoundEffect' has a wrong offset!");

}

